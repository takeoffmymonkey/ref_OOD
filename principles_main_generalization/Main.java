package principles_main_generalization;

/* ГЕНЕРАЛИЗАЦИЯ - ВЫНЕСЕНИЕ ОБЩЕЙ ЧАСТИ В ОТДЕЛЬНЫЙ МОДУЛЬ
 * - 1 общий метод
 *      - объединяет повторяющиеся инструкции
 *
 * - 1 общий класс-родитель
 *      - объединяет повторяющиеся атрибуты и методы
 *
 * - 1 общий интерфейс
 *      - объединяет повторяющиеся методы
 *
 * - схожа с принципом DRY */


/* ПОЗВОЛЯЕТ
 * - сократить повторы при решении проблем
 * - сократить места для исправления ошибок */


/* КЛЮЧЕВЫЕ ПРИНЦИПЫ ГЕНЕРАЛИЗАЦИИ
 * - для существования подкласса должен быть смысл
 *      - он должен специализировать суперкласс
 *          - напр. работник и менеджер (добавляет специализацию)
 *              - но разные сорта пиццы - нет
 *                  - просто меняется начинка
 *
 * - принцип подстановки Лисков
 *      - подкласс может заменить суперкласс только если он не меняет функционал суперкласса
 *          - т.е. если он меняет поведение на абсолютно другое
 *      - напр. у класса Animal метод walk, а Whale меняет его на swim
 *          - т.е. подкласс себя ведет неожиданным образом
 *      - напр. в Java Collections Stack наследует Vector
 *          - а его методы вставки позволяют вставлять по любому индексу
 *              - что противоречит концепции Stack (FILO)*/


public class Main {


    abstract class Animal {
        int size;

        void makeVoice() {

        }
    }

    class Cat extends Animal {
        @Override
        void makeVoice() {
            System.out.println("Meow");
        }

        void pur() {
        }
    }

    interface Voice {
        void makeVoice();
    }

    class Rat implements Voice {
        @Override
        public void makeVoice() {
            System.out.println("Pisk");
        }
    }
}