package principles_main_decomposition;

import java.util.ArrayList;

/* ДЕКОМПОЗИЦИЯ - РАЗДЕЛЕНИЕ (И СБОРКА) ЦЕЛОЙ МОДЕЛИ ИЗ ПРОБЛЕМНОЙ ОБЛАСТИ НА ЧАСТИ
 * - для упрощения понимания концепции */


/* РАЗДЕЛЕНИЕ ПРОИСХОДИТ ПО ОТВЕТСТВЕННОСТЯМ ЧАСТЕЙ
 * - т.е. класс выделяется на основании ответственности, которую выполняет часть концепции
 *       - части сами могут состоять из частей */


/* КОЛИЧЕСТВО ЧАСТЕЙ НА ПРОТЯЖЕНИИ ЖИЗНИ МОДЕЛИ МОЖЕТ БЫТЬ ПОСТОЯННЫМИ ИЛИ МЕНЯТСЯ
 * - постоянное
 *      - напр. на протяжении жизненного цикла машины у нее всегда 4 колеса
 *
 * - непостоянное - колво меняется
 *      - напр. на протяжении жизненного цикла машины она перевозит разное количество пассажиров */


/* ЖИЗНЕННЫЙ ЦИКЛ ЦЕЛОГО И ЧАСТЕЙ МОЖЕТ БЫТЬ СИЛЬНО СВЯЗАН ИЛИ НЕ СВЯЗАН
 * - сильно связан - не могут существовать друг без друга
 *      - напр. холодильник и морозильная камера
 *
 * - не связан - завершение жизни части никак не влияет на целое
 *      - напр. холодильник и овощи */


/* ЧАСТИ МОГУТ ОТНОСИТЬСЯ К НЕСКОЛЬКИМ ЦЕЛЫМ ИЛИ ТОЛЬКО К ОДНОЙ
 * - к нескольким
 *      - напр. студенты и специфические курсы
 *
 * - только к одной
 *      - напр. холодильник и морозильная камера */


/* ВИДЫ ДЕКОМПОЗИЦИИ
 * - АССОЦИАЦИИ:
 *      - связь: слабая
 *      - тип связи: "использует"
 *      - классы не зависят друг от друга, и связаны временно
 *      - напр. студент и вид спорта
 *          - сколько угодно студентов может заниматься 1 видом спорта
 *          - 1 студент может заниматься сколькими угодно видами спорта
 *
 * - АГРЕГАЦИЯ:
 *      - связь: слабая
 *      - тип связи: "имеет"
 *      - содержащий класс и содержащиеся классы могут существовать независимо
 *      - напр. самолет и экипаж
 *          - самолет не полетит без экипажа
 *          - но самолет может существовать без экипажа
 *          - а член экипажа может быть частью экипажа другого самолета
 *
 * - КОМПОЗИЦИЯ:
 *      - связь: сильная
 *      - тип связи: "имеет"
 *      - содержащий класс и содержащиеся классы существуют только вместе
 *      - напр. дом и комната
 *          - если убрать дом, то не станет и дома
 *          - когда создается дом, создаются и комнаты
 *              - а не передаются в конструктор */

public class Main {
    /* АССОЦИАЦИЯ */
    class Sport {

    }

    class Student {
        void play(Sport s) {
            // execute.play (s);
        }
    }


    /* АГГРЕГАЦИЯ */
    class CrewMember {

    }

    class Airliner {
        private ArrayList<CrewMember> crewMembers;

        public Airliner() {
            crewMembers = new ArrayList<CrewMember>();
        }

        public void add(CrewMember crewMember) {
            crewMembers.add(crewMember);
        }
    }


    /* КОМПОЗИЦИЯ */
    class Room {
    }

    class House {
        private Room room;

        public House() {
            room = new Room(); // комната создается вместе с домом, а не передается внутрь
        }
    }
}