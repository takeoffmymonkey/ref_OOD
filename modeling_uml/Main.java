/* UML - UNIFIED MODELING LANGUAGE
 * - язык для описания моделей из проблемной области
 *
 * - является формой реализации технического дизайна
 *
 * - модели могут основываться на моделях из CRC карт
 *      - но в CRC картах обязанности модели сочетают и атрибуты и методы этой модели
 *
 * - позволяет быстро переносить дизайн в код и обратно */


/* ДИАГРАММА КЛАССОВ
 * - описывает классовую архитектуру системы
 *
 * - модель класса состоит из 3 блоков:
 *      - 1: имя класса
 *      - 2: свойства (атрибуты) класса
 *          имя поля: Тип
 *      - 3: операции (методы) класса
 *          имя метода (имя параметра: Тип) : Возвращаемый тип */


/* КАК РЕАЛИЗУЮТСЯ ГЛАВНЫЕ ПРИНЦИПЫ ДИЗАЙНА В КЛАССОВЫХ ДИАГРАММАХ
 * - АБСТРАКЦИЯ:
 *      - принимает форму класса в UML
 *
 * - ИНКАПСУЛЯЦИЯ:
 *      - атрибуты и методы имеют квалификаторы доступа:
 *          - плюс - public
 *          - решетка - protected
 *          - без знака - default
 *          - минус - private
 *      - пакет: пространство имен
 *
 * - ДЕКОМПОЗИЦИЯ:
 *      - 0..* - возможное количество классов
 *
 *      - ассоциация (слабая связь без отношения "имеет"):
 *          - просто прямая черта ________________
 *
 *      - агрегация (слабая связь с отношением "имеет")
 *          - черта с пустым ромбом ________________<>
 *              - ромб указывает на объект, который является "целым" для своих частей
 *                  - части могут одновременно принадлежать другим целым
 *
 *      - композиция (сильная связь с отношением "имеет")
 *          - черта с полным ромбом ________________<*>
 *              - ромб указывает на объект, который является "целым" для своих частей
 *                  - части принадлежат только целому
 *                      - поэтому целое всегда 1
 *
 * - ГЕНЕРАЛИЗАЦИЯ:
 *      - наследование:
 *          - черта со стрелкой ________________|>
 *              - указывает на родительский класс/интерфейс
 *                  - интерфейс помечается как <<interface>> interface
 *                  - родитель всегда сверху
 *
 *      - реализация (интерфейса):
 *          - черта со стрелкой ----------------|>
 *              - указывает на имплементируемый интерфейс */


/* ДИАГРАММА ПОСЛЕДОВАТЕЛЬНОСТИ
 * - показывает как взаимодействуют объекты при выполнении задания
 *      - напр. пользователь на пульте меняет канал
 *
 * - процесс изображается обычно слева направо
 *
 * - помещается в коробку
 *      - в левом верхнем углу название действия
 *
 * - элементы:
 *      - прямоугольник
 *          - роль объекта
 *
 *      - пунктирные линии
 *          - линия жизни объекта
 *
 *      - стрелки (с коротким описанием)
 *          - посылаемое сообщение от 1 объекта другому
 *
 *      - пунктирные стрелки (с коротким описанием)
 *          - возвращаемая информация вызвавшему объекту
 *              - вместе с контролем
 *
 *      - малые прямоугольники на линиях жизни
 *          - запуск метода
 *              - продолжается, пока не получит обратно контроль
 *
 *      - также могут быть:
 *          - люди (если участвуют)
 *          - вложенные последовательности
 *          - альтернативные последовательности
 *              - значок alt в левом верхнем углу
 *          - циклы
 *          - условия
 *              - альтернативные последовательности помещаются в коробку со значком alt в левом
 *              верхнем углу */


/* ДИАГРАММА СОСТОЯНИЙ
 * - показывает состояния системы/объекта и их изменения как серию событий
 *
 * - состояние - как существует объект в определенным момент времени
 *      - определяется значением атрибутов
 *      - напр. состояния автоматической трансмиссии:
 *          - парковка, назад, нейтралка и езда
 *
 * - когда объект в определенном состоянии он
 *      - может вести себя только определенным образом
 *      - или имеет установленные определенным образом атрибуты
 *
 * - элементы:
 *      - черный круг
 *          - начальное состояние объекта
 *          - с него начинается каждая диаграмма
 *
 *      - закругленные прямоугольники
 *          - состояния
 *              - верхняя часть
 *                  - название состояния
 *              - средняя
 *                  - переменные состояния, относящиеся к состоянию
 *              - нижняя
 *                  - активности, происходящие в данном состоянии
 *                      1. начальная
 *                          - что происходит при входе в состояние
 *                      2. do активность
 *                          - что происходит в состоянии
 *                      3. выходная
 *                          - что происходит при выходе и переходе к другому состоянию
 *
 *      - стрелки
 *          - переходы из 1 состояния в другое
 *          - обычно вызваны событиями
 *              - указано над стрелкой
 *
 *      - черный круг внутри пустого
 *          - терминальное состояние (завершение)
 *              - есть не у всех диаграмм
 *                  - некоторые работают вечно
 *
 * - позволяет:
 *      - быстрее понять логику кода
 *      - определить незапланированные условия */