package patterns.structural;

/* СТРУКТУРНЫЕ ПАТТЕРНЫ: отвечают за построение удобных в поддержке иерархий классов
 * - адаптер (adapter): преобразует интерфейс класса к другому интерфейсу, на который рассчитан клиент
 *
 * - мост (bridge): разделяет 1 или несколько классов на 2 отдельные иерархии — абстракцию и
 * реализацию, позволяя изменять их независимо друг от друга
 *
 * - компоновщик (composite): позволяет сгруппировать множество объектов в древовидную структуру, а
 * затем работать с ней так, как будто это единичный объект
 *
 * - декоратор (decorator): динамически наделяет объект новыми возможностями и является гибкой
 * альтернативой субклассированию в области расширения функциональности
 *
 * - фасад (facade): предоставляет простой интерфейс к сложной системе классов, библиотеке или
 * фреймворку
 *
 * - легковес (lightweight): позволяет вместить бóльшее количество объектов в отведённую оперативную
 * память. Экономит память, разделяя общее состояние объектов между собой, вместо хранения
 * одинаковых данных в каждом объекте
 *
 * - заместитель (proxy): позволяет подставлять вместо реальных объектов специальные
 * объекты-заменители. Они перехватывают вызовы к оригинальному объекту, позволяя сделать что-то до
 * или после передачи вызова оригиналу */

public class Main {
}
