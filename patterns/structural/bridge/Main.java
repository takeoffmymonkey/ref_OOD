package patterns.structural.bridge;


/* МОСТ: разделяет один или несколько классов на две отдельные иерархии — абстракцию и реализацию,
 * позволяя изменять их независимо друг от друга */


/* ПРИМЕНЕНИЕ:
 * - когда нужно разделить монолитный класс, который содержит несколько различных реализаций
 * какой-то функциональности
 *      - например, если класс может работать с разными системами баз данных
 *
 * - когда класс нужно расширять в 2 независимых плоскостях
 *
 * - когда вы хотите, чтобы реализацию можно было бы изменять во время выполнения программы */


/* ПЛЮСЫ
 * - позволяет строить платформо-независимые программы
 * - скрывает лишние или опасные детали реализации от клиентского кода
 * - реализует принцип открытости/закрытости */


/* МИНУСЫ
 * - усложняет код программы из-за введения дополнительных классов */


/* СУТЬ РЕАЛИЗАЦИИ
 * - АБСТРАКЦИЯ: содержит управляющую логику
 *      - код абстракции делегирует реальную работу связанному объекту реализации
 *
 * - РЕАЛИЗАЦИЯ: задаёт общий интерфейс для всех реализаций
 *      - все методы, которые здесь описаны, будут доступны из класса абстракции и его подклассов
 *
 * - интерфейсы АБСТРАКЦИИ и РЕАЛИЗАЦИИ могут как совпадать, так и быть совершенно разными
 *      - но обычно в реализации живут базовые операции, на которых строятся сложные операции
 *      абстракции
 *
 * - КОНКРЕТНЫЕ РЕАЛИЗАЦИИ: содержат платформо-зависимый код
 *
 * - РАСШИРЕННЫЕ АБСТРАКЦИИ: содержат различные вариации управляющей логики
 *      - как и родитель, работает с реализациями только через общий интерфейс реализации
 *
 * - КЛИЕНТ: работает только с объектами абстракции
 *      - Не считая начального связывания абстракции с одной из реализаций, клиентский код не имеет
 *      прямого доступа к объектам реализации */


public class Main {
    public static void main(String[] args) {

    }
}