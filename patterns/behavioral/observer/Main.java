package patterns.behavioral.observer;

import patterns.behavioral.observer.abstract_observer.Observer;
import patterns.behavioral.observer.concrete_observable.WeatherData;
import patterns.behavioral.observer.concrete_observer.WeatherDisplay;


/* НАБЛЮДАТЕЛЬ
 * - определяет отношение "один ко многим" между объектами таким образом, что при изменении
 * состояния одного объекта происходит автоматическое оповещение и обновление (опционально) всех
 * зависимых объектов
 *
 * - субъект ничего не знает о наблюдателях
 *      - кроме того, что они реализуют интерфейс Observer
 *
 * - при использовании паттерна возможен как запрос, так и активная доставка данных от субъекта
 *      - запрос считается более правильным
 *
 * - работа кода не должна зависеть от порядка оповещения наблюдателей
 *
 * - Java содержит несколько реализаций паттерна, включая обобщенную реализацию java.util.Observable
 *      - имеет недостатки
 *          - например, java.util.abstract_observer является классом, а не интерфейсом
 *
 * - многие GUI-инфраструктуры широко применяют данный паттерн */


/* ПРИМЕНИМОСТЬ
 * - когда после изменения состояния одного объекта требуется что-то сделать в других, но вы не
 * знаете наперёд, какие именно объекты должны отреагировать
 *
 * - когда одни объекты должны наблюдать за другими, но только в определённых случаях */


/* ПЛЮСЫ
 * - издатели не зависят от конкретных классов подписчиков и наоборот
 * - вы можете подписывать и отписывать получателей на лету
 * - реализует принцип открытости/закрытости */


/* МИНУСЫ
 * - подписчики оповещаются в случайном порядке */


/* СУТЬ РЕАЛИЗАЦИИ
 * - абстракция субъекта, за которым наблюдают ("издатель")
 *      - имеет 3 абстрактных метода:
 *           - для регистрации абстракции наблюдателя
 *           - для удаления абстракции наблюдателя
 *           - для оповещения всех зарегистрированных абстракций наблюдателей
 *
 * - конкректный субъект:
 *      - имеет список зарегистрированных абстракций наблюдателей
 *          - создается вместе с самим конкретным субъектом
 *      - (опционально) поле changed
 *          - указывает, что данные изменились
 *          - проверяется перед отправкой оповещения
 *      - поле с данными и setter-метод для них
 *          - устанавливаются, когда метод вызывает кто-то снаружи, кто предоставляет новые данные
 *              - затем вызывается метод dataChanged()
 *      - метод dataChanged():
 *          - меняет состояние changed
 *          - вызывает метод оповещения всех наблюдателей
 *      - реализация методов абстракции субъекта:
 *          - регистрация абстракции наблюдателя: добавление его в список абстракций наблюдателей
 *          - для удаления абстракции наблюдателя: удаление его из списка
 *          - оповещения всех зарегистрированных абстракций наблюдателей:
 *              - если данные изменились (поле changed), то цикл по всему списку с вызовом метода
 *              update() на каждой абстракции наблюдателя
 *                  - затем смена changed на false
 *              - (опционально) наблюдателям передается ссылка на данный конкретный субъект
 *                  - если они хотят различать свои наблюдаемые субъекты
 *              - (опционально) наблюдателям передается объект с новыми данными
 *                  - но лучше, если сами запрашивают
 *
 * - абстракция наблюдателя, который следит за абстракцией субъекта:
 *      - 1 абстрактный метод update()
 *          - (опционально) может требовать ссылку на абстрактный субъект
 *          - (опционально) может требовать объект с новыми данными
 *
 * - конкретный наблюдатель:
 *      - при создании требует ссылку на конкретный субъект, сохраняет ее, и автоматически
 *      регистрирует себя для данного субъекта
 *      - метод update():
 *          - (опционально) проверка типа субъекта, чтобы отличить от других своих субъектов
 *          - (опционально) запрос у субъекта данных */


public class Main {
    public static void main(String[] args) {
        WeatherData weatherData = new WeatherData(); // создание субъекта
        Observer o1 = new WeatherDisplay(weatherData); // создание наблюдателя (+ авторегистрация)
        weatherData.setTemperature(30); // внешняя смена температуры
        weatherData.removeObserver(o1); // удаление наблюдателя
    }
}