package patterns.behavioral;


/* ПОВЕДЕНЧЕСКИЕ ПАТТЕРНЫ: решают задачи эффективного и безопасного взаимодействия между объектами
 * программы
 *
 * - команда (command): превращает запросы в объекты, позволяя передавать их как аргументы при
 * вызове методов, ставить запросы в очередь, логировать их, а также поддерживать отмену операций
 *
 * - наблюдатель (observer): создаёт механизм подписки, позволяющий одним объектам следить и
 * реагировать на события, происходящие в других объектах
 *
 * - стратегия (strategy): определяет семейство схожих алгоритмов и помещает каждый из них в
 * собственный класс, после чего алгоритмы можно взаимозаменять прямо во время исполнения программы
 *
 * - цепочка обязанностей (chain of responsibility): позволяет передавать запросы последовательно по
 * цепочке обработчиков. Каждый последующий обработчик решает, может ли он обработать запрос сам и
 * стоит ли передавать запрос дальше по цепи
 *
 * - итератор (iterator): даёт возможность последовательно обходить элементы составных объектов, не
 * раскрывая их внутреннего представления
 *
 * - посредник (mediator): позволяет уменьшить связанность множества классов между собой, благодаря
 * перемещению этих связей в один класс-посредник
 *
 * - снимок, хранитель (memento): позволяет сохранять и восстанавливать прошлые состояния объектов,
 * не раскрывая подробностей их реализации
 *
 * - состояние (state): позволяет объектам менять поведение в зависимости от своего состояния. Извне
 * создаётся впечатление, что изменился класс объекта
 *
 * - шаблонный метод (template method): определяет скелет алгоритма, перекладывая ответственность за
 * некоторые его шаги на подклассы. Паттерн позволяет подклассам переопределять шаги алгоритма, не
 * меняя его общей структуры
 *
 * - посетитель (visitor): позволяет добавлять в программу новые операции, не изменяя классы
 * объектов, над которыми эти операции могут выполняться */


public class Main {
}
