package patterns.complex.mvc;

import patterns.complex.mvc.controller.BeatController;
import patterns.complex.mvc.controller.ControllerInterface;
import patterns.complex.mvc.model.BeatModel;
import patterns.complex.mvc.model.BeatModelInterface;


/* МОДЕЛЬ: все данные, информация состояния и логика приложения
 *      - не знает о существовании представления и контроллера
 *      - предоставляет интерфейс для изменения/получения состояния
 *      - может отправлять оповещения об изменениях состояния наблюдателям
 *
 * ПРЕДСТАВЛЕНИЕ: определяет представления модели (для пользователя)
 *      - обычно получает состояние и данные для отображения непосредственно от модели
 *      - обязанностью является только визуальные аспекты интерфейса (а не его поведение)
 *          - предоставляет методы, связанные с интерфейсом (enable/disable), нужные из которых в
 *          нужный момент вызывает контроллер
 *      - может использовать разные реализации контроллера для обеспечения разного поведения
 *
 * КОНТРОЛЛЕР: получает от представления данные, вводимые пользователем, и определяет их смысл для
 * модели
 *      - вызывает соответствующие методы модели
 *      - принимает все решения относительно поведения интерфейса на основании выбора пользователя
 *          - например, спрятать некоторые опции
 *      - может также получать оповещения от модели
 *      - обычно 1 для 1 представления, но может без проблем быть и 1 для нескольких
 *
 * - например: приложение "проигрыватель аудио":
 *      - пользователь взаимодействует с моделью через представление
 *          - например, нажимает на кнопку проигрывания
 *      - контроллер должен понять, что означает данное действие, и обратиться к модели с
 *      соответствующим запросом
 *          - например, начать проигрывание
 *      - контроллер может также обратиться к представлению с запросом об изменении
 *          - например, заблокировать какие-то кнопки или команды меню
 *      - модель оповещает представление, когда в ней (модели) изменяется состояние
 *          - например, когда начинается следующий трек или пользователь что-то сделал
 *      - представление запрашивает у модели информацию состояния
 *          - например, когда модель оповещает представление о начале нового трека, представление
 *          запрашивает название трека и отображает его
 *          - может также запрашивать информацию состояния у модели в результате запроса на
 *          изменение состояния со стороны контроллера */


/* ИСПОЛЬЗУЕМЫЕ ПАТТЕРНЫ
 * - МОДЕЛЬ использует НАБЛЮДАТЕЛЬ: для оповещения представлений и контроллеров об изменениях
 * состояния
 *      - обеспечивает полную независимость модели от контроллеров и представлений
 *      - позволяет использовать разные представления с одной моделью
 *
 * - ПРЕДСТАВЛЕНИЕ И КОНТРОЛЛЕР используют СТРАТЕГИЮ:
 *      - представление делегирует контроллеру обработку действий пользователя
 *      - контроллер является объектом стратегии для представления
 *          - чтобы переключить поведение представление, достаточно выбрать подходящий контроллер
 *      - сохраняет логическую изоляцию представления от модели
 *
 * - ПРЕДСТАВЛЕНИЕ использует КОМПОНОВЩИК:
 *      - каждый компонент интерфейса может быть комбинацией (окно) или листом (кнопка)
 *      - при обращении контроллера с запросом на изменение, он обращается только к родительскому
 *      элементу
 *
 * - АДАПТЕР используется при появлении, например, новой МОДЕЛИ
 *      - чтобы адаптировать ее к существующим контроллерам и представлениям
 *
 * - совместная работа паттернов обеспечивает слабую связанность всех 3 компонентов MVC */


public class Main {

    public static void main(String[] args) {
        BeatModelInterface model = new BeatModel();
        ControllerInterface controller = new BeatController(model);
    }
}