package patterns.creational.prototype;


/* ПРОТОТИП: позволяет копировать объекты, не вдаваясь в подробности их реализации */


/* ПРИМЕНЕНИЕ:
 * - когда код не должен зависеть от классов копируемых объектов
 * - когда вы имеете уйму подклассов, которые отличаются начальными значениями полей
 *      - кто-то мог создать все эти классы, чтобы иметь возможность легко порождать объекты с
 *      определённой конфигурацией */


/* ПЛЮСЫ
 * - позволяет клонировать объекты, не привязываясь к их конкретным классам
 * - меньше повторяющегося кода инициализации объектов
 * - ускоряет создание объектов
 * - альтернатива созданию подклассов для конструирования сложных объектов */


/* МИНУСЫ
 * - сложно клонировать составные объекты, имеющие ссылки на другие объекты */


/* СУТЬ РЕАЛИЗАЦИИ
 * - ИНТЕРФЕЙС ПРОТОТИПОВ: описывает операции клонирования
 *      - в большинстве случаев — это единственный метод clone
 *
 * - КОНКРЕТНЫЙ ПРОТОТИП: реализует операцию клонирования самого себя
 *      - помимо банального копирования значений всех полей, здесь могут быть спрятаны различные
 *      сложности, о которых не нужно знать клиенту
 *          - например, клонирование связанных объектов, распутывание рекурсивных зависимостей и т.д.
 *
 * - КЛИЕНТ: создаёт копию объекта, обращаясь к нему через общий интерфейс прототипов */


public class Main {
    public static void main(String[] args) {

    }
}