package patterns.creational.builder;


/* СТРОИТЕЛЬ: позволяет создавать сложные объекты пошагово
 * - даёт возможность использовать один и тот же код строительства для получения разных
 * представлений объектов */


/* ПРИМЕНЕНИЕ:
 * - когда хотите избавиться от «телескопического конструктора»
 * - когда ваш код должен создавать разные представления какого-то объекта
 *      - например, деревянные и железобетонные дома
 * - когда вам нужно собирать сложные составные объекты, например, деревья Компоновщика */


/* ПЛЮСЫ
 * - позволяет создавать продукты пошагово
 * - позволяет использовать один и тот же код для создания различных продуктов
 * - изолирует сложный код сборки продукта от его основной бизнес-логики */


/* МИНУСЫ
 * - усложняет код программы из-за введения дополнительных классов
 * - клиент будет привязан к конкретным классам строителей, так как в интерфейсе строителя может не
 * быть метода получения результата */


/* СУТЬ РЕАЛИЗАЦИИ
 * - ИНТЕРФЕЙС СТРОИТЕЛЯ: объявляет шаги конструирования продуктов, общие для всех видов строителей
 *
 * - КОНКРЕТНЫЕ СТРОИТЕЛИ: реализуют строительные шаги, каждый по-своему
 *      - могут производить разнородные объекты, не имеющие общего интерфейса
 *
 * - ПРОДУКТ: создаваемый объект
 *      - продукты, сделанные разными строителями, не обязаны иметь общий интерфейс
 *
 * - ДИРЕКТОР: определяет порядок вызова строительных шагов для производства той или иной
 * конфигурации продуктов
 *
 * - КЛИЕНТ: обычно подаёт в конструктор директора уже готовый объект-строитель, и в дальнейшем
 * данный директор использует только его
 *      - возможен и другой вариант, когда клиент передаёт строителя через параметр строительного
 *      метода директора
 *          - в этом случае можно каждый раз применять разных строителей для производства различных
 *          представлений объектов */


public class Main {
    public static void main(String[] args) {

    }
}
