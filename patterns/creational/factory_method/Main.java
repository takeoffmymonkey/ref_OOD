package patterns.creational.factory_method;

import patterns.creational.factory_method.abstract_creator.PizzaStore;
import patterns.creational.factory_method.concrete_creator.ChicagoPizzaStore;
import patterns.creational.factory_method.concrete_creator.NYPizzaStore;

/* Все фабричные паттерны:
 *      - инкапсулируют создание экземпляров
 *      - обеспечивают слабую связанность за счет сокращения зависимости приложения от конкретных
 *      классов */


/* ФАБРИЧНЫЙ МЕТОД: определяет общий интерфейс создания объектов в суперклассе, позволяя подклассам
 * изменять тип создаваемых объектов
 *
 * - т.е. основан на наследовании
 *      - создание объектов делегируется субклассам, реализующим фабричный метод, где и указывается
 *      конкретный механизм создания нужных объектов
 *
 * - не единственный, но один из наиболее мощных приемов обеспечения инверсии зависимостей
 *      - "создатель" не зависит от конкретных реализаций продукта, а работает с его абстракцией */


/* ПРИМЕНИМОСТЬ
 * - когда заранее неизвестны типы и зависимости объектов, с которыми должен работать ваш код
 * - когда вы хотите дать возможность пользователям расширять части вашего фреймворка или библиотеки
 * - уогда вы хотите экономить системные ресурсы, повторно используя уже созданные объекты, вместо
 * порождения новых */


/* ПЛЮСЫ
 * - избавляет класс от привязки к конкретным классам продуктов
 * - выделяет код производства продуктов в одно место, упрощая поддержку кода
 * - упрощает добавление новых продуктов в программу
 * - реализует принцип открытости/закрытости */


/* МИНУСЫ
 * - может привести к созданию больших параллельных иерархий классов, так как для каждого класса
 * продукта надо создать свой подкласс создателя */


/* СУТЬ РЕАЛИЗАЦИИ
 * - абстракция продукта: определяет общий интерфейс объектов, которые может произвести создатель и
 * его подклассы
 *      - например, "пицца"
 *
 * - конкретные продукты: содержат код различных продуктов
 *      - например, "нью-йоркская вегетарианская пицца" или "чикагская вегетарианская пицца"
 *      - будут отличаться реализацией, но интерфейс у них будет общий
 *
 * - абстрактный создатель: объявляет фабричный метод, который должен возвращать новые объекты
 * продуктов
 *      - например, "пиццерия"
 *      - тип результата метода должен совпадать с общим интерфейсом продуктов
 *      - метод может объявляться абстрактным, чтобы все подклассы реализовали его по-своему
 *          - но также может иметь и дефолтную реализацию, возвращающую некий стандартный продукт
 *      - сам класс, как правило, не ограничивается ФМ, и имеет код, который работает с продуктом,
 *      который возвращает ФМ
 *
 * - конкретные создатели: по-своему реализуют ФМ, производя те или иные конкретные продукты, но
 * возвращая их абстракции
 *      - например, "нью-йоркская пиццерия" или "чикагская пиццерия"
 *          - каждая создает свои версии, например, вегетарианских пицц
 *      - ФМ не обязан только создавать новые объекты:
 *          - например, может возвращать существующие объекты из какого-то хранилища или кэша */


/* ФМ VS ПРОСТАЯ ФАБРИКА
 * - оба предназначены для создания разных конкретных продуктов под видом одной абстракции продукта
 *
 * - простая фабрика является конкретным классом с единственным методом создания продуктов, и клиент
 * содержит ссылку на нее в виде композиции. ФМ является абстрактным методом создания продуктов и
 * объявляется в абстрактном (из-за наличия абстрактного метода) клиенте ("создателе"), а все
 * наследники обязаны его реализовать по своему усмотрению
 *
 * - простая фабрика обладает узкой специализацией создаваемых продуктов, а ФМ ведет к созданию
 * инфраструктуры за счет того, что каждый субкласс может по-своему реализовывать метод создания */


public class Main {
    public static void main(String[] args) {
        PizzaStore pizzaStore = new NYPizzaStore(); // выбор конкретной версии пиццерии
        pizzaStore.orderPizza("veggie"); // готовит вегитарианскую пиццу версии NY
        PizzaStore pizzaStore2 = new ChicagoPizzaStore(); // выбор конкретной версии пицерии
        pizzaStore2.orderPizza("veggie"); // готовит вегитарианскую пиццу версии Chicago
    }
}
