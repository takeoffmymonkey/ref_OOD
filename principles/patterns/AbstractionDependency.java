package principles.patterns;


/* КОД ДОЛЖЕН ЗАВИСЕТЬ ОТ АБСТРАКЦИЙ, А НЕ ОТ КОНКРЕТНЫХ КЛАССОВ
 *       - еще называется инверсией зависимостей
 *       - похож на принцип программирования на уровне интерфейсов, но предъявляет более жесткие
 *       требования к абстравции: высокоуравневые компоненты не должны зависеть от низкоуравневых
 *           - и те и другие должны зависеть от абстракций
 *       - например, PizzaStore работает с конкретными реализациями Pizza
 *           - PizzaStore - высокоуравневый
 *           - конкретные пиццы - низкоуравневые
 *           - нужно, чтобы PizzaStore работал с интерфейсом Pizza, а не конкретными экземплярами
 *       - инверсия, потому что сначала абстракция зависела от низкоуравневых компонентов, а должно
 *       стать наоборот
 *       - советы по применению принципа:
 *           - ссылки на конкретные классы не должны храниться в переменных
 *               - нужно использовать Фабрику
 *           - в архитектуре классов не должно быть классов, производных от конкретных классов
 *               - такое наследование создает дополнительную зависимость
 *                   - классы должны происходить от абстракций
 *           - методы не должны переопределять методы, реализованные в каких-либо из его базовых
 *           классов
 *               - если переопределяется реализованный метод, значит он был плохой абстракцией
 *               - методы, реализованные в базовом классе должны использоваться всеми подклассами*/


public class AbstractionDependency {
}
